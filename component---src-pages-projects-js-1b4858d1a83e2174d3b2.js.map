{"version":3,"sources":["webpack:///./src/components/Projects.js","webpack:///./src/pages/projects.js"],"names":["renderProject","project","name","id","repoUrl","liveUrl","excerpt","key","className","href","target","rel","aria-label","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","dangerouslySetInnerHTML","__html","Projects","projects","length","Container","map","ProjectsPage","useStaticQuery","site","allMarkdownRemark","edges","node","frontmatter","Layout","Helmet","title","siteMetadata","SEO"],"mappings":"qMAKMA,EAAgB,SAACC,GAAa,IAC1BC,EAAwCD,EAAxCC,KAAMC,EAAkCF,EAAlCE,GAAIC,EAA8BH,EAA9BG,QAASC,EAAqBJ,EAArBI,QAASC,EAAYL,EAAZK,QAEpC,OACE,wBAAIC,IAAKJ,EAAIK,UAAU,SACrB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,8BACZH,EACC,uBACEI,KAAMJ,EACNK,OAAO,SACPC,IAAI,aACJH,UAAU,0BACVI,aAAA,SAAqBP,GAErB,kBAAC,IAAD,KAAKH,IAGP,kBAAC,IAAD,KAAKA,GAENG,GACC,uBACEI,KAAMJ,EACNK,OAAO,SACPC,IAAI,aACJC,aAAA,2BAAuCP,GAEvC,yBACEG,UAAU,6BACVK,KAAK,OACLC,OAAO,eACPC,QAAQ,YACRC,MAAM,8BAEN,0BACEC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,oFAMZ,yBACEZ,UAAU,iCACVa,wBAAyB,CAAEC,OAAQhB,MAGtCF,GACC,6BACE,uBACEK,KAAML,EACNI,UAAU,qEACVI,aAAA,SAAqBR,GAErB,0BAAMI,UAAU,QAAhB,uBASRe,EAAW,SAAC,GAAuB,IAAD,IAApBC,gBAAoB,MAAT,GAAS,EACtC,OAAKA,EAASC,OAGZ,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,iBACA,wBAAIlB,UAAU,4BACXgB,EAASG,IAAI3B,KANS,MCnBhB4B,UA7CM,WAAO,IAAD,EACWC,yBAAe,cAA3CC,EADiB,EACjBA,KA2BFN,EA5BmB,EACXO,kBA2BqBC,MAAML,KAAI,gBAAGM,EAAH,EAAGA,KAAH,MAAe,CAC1D9B,GAAI8B,EAAKC,YAAY/B,GACrBD,KAAM+B,EAAKC,YAAYhC,KACvBE,QAAS6B,EAAKC,YAAY9B,QAC1BC,QAAS4B,EAAKC,YAAY7B,QAC1BC,QAAS2B,EAAK3B,YAGhB,OACE,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAK,cAAgBP,EAAKQ,aAAaD,QAC/C,kBAACE,EAAA,EAAD,MACA,kBAAC,EAAD,CAAUf,SAAUA","file":"component---src-pages-projects-js-1b4858d1a83e2174d3b2.js","sourcesContent":["import React from 'react'\n\nimport { Container } from './Container'\nimport { H1, H2 } from './Headings'\n\nconst renderProject = (project) => {\n  const { name, id, repoUrl, liveUrl, excerpt } = project\n\n  return (\n    <li key={id} className=\"py-12\">\n      <div className=\"space-y-5\">\n        <div className=\"space-y-6\">\n          <div className=\"flex flex-row items-center\">\n            {liveUrl ? (\n              <a\n                href={liveUrl}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"font-bold no-underline \"\n                aria-label={`Go to ${liveUrl}`}\n              >\n                <H2>{name}</H2>\n              </a>\n            ) : (\n              <H2>{name}</H2>\n            )}\n            {liveUrl && (\n              <a\n                href={liveUrl}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                aria-label={`Follow external link to ${liveUrl}`}\n              >\n                <svg\n                  className=\"w-5 h-5 ml-1 text-gray-500\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"\n                  ></path>\n                </svg>\n              </a>\n            )}\n          </div>\n          <div\n            className=\"text-gray-500 prose max-w-none\"\n            dangerouslySetInnerHTML={{ __html: excerpt }}\n          />\n        </div>\n        {repoUrl && (\n          <div>\n            <a\n              href={repoUrl}\n              className=\"text-base font-bold text-blue-600 no-underline hover:text-blue-400\"\n              aria-label={`Go to ${repoUrl}`}\n            >\n              <span className=\"mr-1\">View source -&gt;</span>\n            </a>\n          </div>\n        )}\n      </div>\n    </li>\n  )\n}\n\nconst Projects = ({ projects = [] }) => {\n  if (!projects.length) return null\n\n  return (\n    <Container>\n      <H1>Projects</H1>\n      <ul className=\"divide-y divide-gray-200\">\n        {projects.map(renderProject)}\n      </ul>\n    </Container>\n  )\n}\n\nexport { Projects }\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport { Layout } from '../components/Layout'\nimport { SEO } from '../components/SEO'\nimport { Projects } from '../components/Projects'\n\nconst ProjectsPage = () => {\n  const { site, allMarkdownRemark } = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(\n          sort: { fields: [frontmatter___id], order: ASC }\n          filter: { frontmatter: { template: { eq: \"project\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(format: HTML)\n              frontmatter {\n                name\n                id\n                repoUrl\n                liveUrl\n              }\n            }\n          }\n        }\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `\n  )\n  const projects = allMarkdownRemark.edges.map(({ node }) => ({\n    id: node.frontmatter.id,\n    name: node.frontmatter.name,\n    repoUrl: node.frontmatter.repoUrl,\n    liveUrl: node.frontmatter.liveUrl,\n    excerpt: node.excerpt,\n  }))\n\n  return (\n    <Layout>\n      <Helmet title={`Projects | ${site.siteMetadata.title}`} />\n      <SEO />\n      <Projects projects={projects} />\n    </Layout>\n  )\n}\n\nexport default ProjectsPage\n"],"sourceRoot":""}