{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/a-ts-module-in-a-js-project/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A TypeScript module in a JavaScript Project\",\n  \"date\": \"2021-10-01T00:00:00.000Z\",\n  \"description\": \"How my published TypeScript module failed in a JavaScript project.\",\n  \"draft\": false,\n  \"template\": \"post\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In January, 2021, I published \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dtjv/sm-2\"\n  }, \"@dtjv/sm-2\"), \", a\\nTypeScript package that implements the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.supermemo.com/en/archives1990-2015/english/ol/sm2\"\n  }, \"SM2 algorithm\"), \".\\nIt passed linting, type-check and unit testing for a confidence boosting 100%\\ncoverage report. Yet, it failed as soon as I integrated it into my vanilla\\nJavaScript application. How could this be? Read on to find out.\"), mdx(\"h2\", null, \"What assumptions did I make?\"), mdx(\"p\", null, \"As a developer of a TypeScript module, my development environment is setup to\\nverify my code is type safe. In order for my tests to compile and run, I must\\nuse the module as intended - which I expect other developers to do as well.\"), mdx(\"p\", null, \"It's wrong to assume other developers are running an environment that guides\\nthem to the proper path of usage. And in my case, the project that used this\\nmodule had no type-checking tools running. I never received a heads-up that\\narguments I passed in where not type verified, and thus potentially invalid.\"), mdx(\"p\", null, \"Still, all my tests passed and code coverage was great - what's missing?\"), mdx(\"h2\", null, \"What does 100% coverage mean?\"), mdx(\"p\", null, \"At a superficial level, 100% coverage means every line executed at least once\\nduring testing. If all tests pass, then there exists a happy path to success for\\nthe data provided in the test cases. But coverage statistics and passing tests\\nsay nothing about code correctness for data \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not\"), \" provided, nor do they say\\nanything about the correctness of every program state.\"), mdx(\"p\", null, \"Without the \\\"safety net\\\" of a type-checker, and no confidence in test\\ncompleteness, it's obvious my TypeScript module is a vanilla JavaScript program\\nwithout comprehensive parameter validation.\"), mdx(\"h2\", null, \"How to test TypeScript for a JavaScript environment?\"), mdx(\"p\", null, \"Once I implemented the validation logic, I disabled the automatic type-checking\\nwhen tests run. This change allowed test cases for invalid data inputs to run\\nfree from the restrictions of type-checking rules.\"), mdx(\"p\", null, \"As expected, I continue to receive type-errors for the invalid data test cases\\nin my code editor and via a type-check script - and I ignore them.\"), mdx(\"h3\", null, \"A Short Example\"), mdx(\"p\", null, \"For future reference, here's an example of the setup I'm using.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# sample project layout\"), \"\\napp/\\n\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 src/\\n\\u2502   \\u2514\\u2500\\u2500 index.ts\\n\\u251C\\u2500\\u2500 tests/\\n\\u2502   \\u2514\\u2500\\u2500 index-test.ts\\n\\u251C\\u2500\\u2500 tsconfig.json\\n\\u2514\\u2500\\u2500 tsconfig.xo.json\"))), mdx(\"p\", null, \"My TypeScript module project uses the test framework,\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://node-tap.org\"\n  }, \"node-tap\"), \" which relies on\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://typestrong.org/ts-node/\"\n  }, \"ts-node\"), \" to run test files written in\\nTypeScript. Below, I add ts-node configuration to \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"tsconfig.json\"), \" that disables\\ntype-checking.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Code blocks snipped for brevity.\")), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"tsconfig.json\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"json\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-json\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"include\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"src\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"ts-node\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"transpileOnly\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token boolean\"\n  }, \"true\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"p\", null, \"Here, I added a separate type-check script to \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"package.json\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"package.json\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"json\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-json\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"scripts\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"test\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"tap --ts\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"type-check\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"tsc --pretty --noEmit --project tsconfig.xo.json\\\"\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"p\", null, \"For clarity, you can see the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"tsconfig.xo.json\"), \" adds the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"tests/\"), \" folder.\"), mdx(\"div\", {\n    \"className\": \"gatsby-code-title\"\n  }, \"tsconfig.xo.json\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"json\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-json\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"extends\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"./tsconfig.json\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token property\"\n  }, \"\\\"include\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"src\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"tests\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"I find TypeScript a great tool to improve code quality, but it guarantees\\nnothing. In the end, confidence in correctness relies on the robustness of the\\ncode and the breadth of our tests - not just the type annotations.\"), mdx(\"p\", null, \"And, I need to validate my parameters better. \\uD83E\\uDD2A\"), mdx(\"p\", null, \"Thanks for reading.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/a-ts-module-in-a-js-project/"},"frontmatter":{"title":"A TypeScript module in a JavaScript Project","description":"How my published TypeScript module failed in a JavaScript project.","date":"October 01, 2021"}},"site":{"siteMetadata":{"title":"David Valles","siteUrl":"https://dtjv.io"}}},"pageContext":{"id":"86cc9a7f-f4fa-5e58-976a-76f11080fadd"}},
    "staticQueryHashes": ["3764592887"]}