{"componentChunkName":"component---src-templates-post-js","path":"/mvc/","result":{"data":{"markdownRemark":{"html":"<p>Today, modern web applications use some flavor of the\n<a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">MVC pattern</a>\nwith the aid of a\n<a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">client-side framework</a>.\nHaving missed the pre-frontend framework era, I asked myself if I <em>really</em>\nunderstood this foundational pattern? To answer this question, I decided to\nbuild an app that adhered to the basic premise of MVC. This article discusses\nkey points of my implementation.</p>\n<!-- more -->\n<ul>\n<li>View the <a href=\"https://dtjv.io/mvc.ts\">demo</a>.</li>\n<li>View the <a href=\"https://github.com/dtjv/mvc.ts\">source code</a>.</li>\n</ul>\n<h2>MVC Basics</h2>\n<p>The MVC pattern describes a way to split an application into areas of concern\nand how these areas relate to each other. The areas of concern include the data\nmodel, the view and the controller.</p>\n<h3>Model</h3>\n<p>The Model represents the application data and the functionality to manage that\ndata. It maintains data integrity by ensuring data creation and modification\nabide by the application rules.</p>\n<h3>View</h3>\n<p>The View provides a visual representation of the application data.</p>\n<h3>Controller</h3>\n<p>The Controller encapsulates all business logic and orchestrates communication\nbetween the Model, the View and any other components added to the mix.</p>\n<h2>Questions</h2>\n<p>The high-level descriptions in the previous section lack clarity on real world\nimplementation details. As I began to sketch out a rough design for my app, the\nfollowing questions came to mind.</p>\n<ul>\n<li>How does the application start?</li>\n<li>Who retrieves initial data?</li>\n<li>How does data get into the Model?</li>\n<li>How does the View get access to data?</li>\n<li>How does user interaction change the Model data?</li>\n<li>Should the View handle user interaction?</li>\n<li>Should the View update the Model?</li>\n<li>Should the Model persist data?</li>\n<li>What is the difference between the Model and application state?</li>\n</ul>\n<p>For these implementational details, there are no definitive right or wrong\nanswers. I realized I needed to choose a direction and build.</p>\n<h2>Version 1</h2>\n<p>In this first version of my todo app, I pass instances of the View, Model and\nStore components into the Controller. The Controller manages data retrieval,\ndata persistence, and communication between components.</p>\n<p>Below shows the application construction.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// index.ts</span>\n<span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Store</span><span class=\"token punctuation\">(</span><span class=\"token string\">'todos1'</span><span class=\"token punctuation\">,</span> localStorage<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Model</h3>\n<p>The Todos class is the application Model and is dead simple, focusing on\ncreating and managing the in-memory storage of all Todo instances.</p>\n<h3>View</h3>\n<p>The View renders all Todos that are in-memory. The View knows about the Model\nstructure - that is, it knows the Todo properties to render, but it doesn't\ncommunicate to or change the Model. When a user performs an action, the View\nexecutes registered event handlers associated with that user action. Those\nhandlers are Controller methods.</p>\n<h3>Controller</h3>\n<p>Again, the Controller orchestrates the app's activities. For example, the code\nsnippet below is a Controller event handler that executes when a user clicks on\nthe <code class=\"language-text\">Add Task</code> button and triggers the View to emit an event to create a todo.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// app.ts (aka the Controller)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n\n  <span class=\"token comment\">// 1. tell Model to create and insert a new Todo</span>\n  <span class=\"token comment\">// 2. persist the Model</span>\n  <span class=\"token comment\">// 3. message the View to update</span>\n  <span class=\"token function\">handleCreateTodo</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> task<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To keep the View decoupled from the Controller, registered handlers for View\nevents must have the same function signature. (See below).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> event<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></code></pre></div>\n<h3>Store</h3>\n<p>I also decided to separate out the persistence mechanism into its own component.\nThe code snippet below shows the Store class implemented to accept a\nLocalStorage object.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Store</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> db<span class=\"token operator\">:</span> Storage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token string\">'[]'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the current design, the Controller makes calls directly to the Store to save\nand retrieve data. You'll notice the Store retrieves <strong>all</strong> the data into\nmemory at once. This begs the question <em>\"What happens when the data amount\nexceeds memory capacity or exceeds storage limits?\"</em></p>\n<p>One solution could be to use pagination and store the data across key indices\n(assuming the storage limit was per key and not the whole database).</p>\n<p>In the event the app exceeded the whole storage limit, I'd need to write a new\nStore class that used a different database and change the Controller based on\nhow I built the Store. The need to swap data stores is not out of the ordinary.\nTo ease this transition, the Store and the Controller should communicate by a\nwell defined interface. As it stands right now, the Controller and the Store are\ntoo tightly coupled - a limitation I'll need to fix at another time.</p>\n<h2>Version 2</h2>\n<p>In version 2, the application construction remains the same as version 1 - save\nfor one small change to the View constructor. I'll discuss all the underlying\nchanges next.</p>\n<h3>Emitter</h3>\n<p>First, I introduce an Emitter class that gives a subclass the ability to fire\nfunctions listening to any event that subclass emits.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Emitter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> listeners<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Listener<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> Listener<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Models</h3>\n<p>The Models are more robust in this version. A Todo is now a class implementation\nthat encapsulates Todo construction and modifications. The Todos class manages\nthe collection of all Todos. Both classes subclass Emitter and emit a <code class=\"language-text\">CHANGE</code>\nevent when their internal data change.</p>\n<p>The snippet below illustrates the Model event system. Here, the Todo exposes a\n<code class=\"language-text\">toggle()</code> method to change the internal state of a Todo. Once changed, the Todo\nwill execute listeners listening on the <code class=\"language-text\">CHANGE</code> event.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Todo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Emitter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> _done<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">// 1. flip the `_done` property</span>\n  <span class=\"token comment\">// 2. call listeners function registered to the change event</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_done <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_done\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>TodoEvents<span class=\"token punctuation\">.</span><span class=\"token constant\">CHANGE</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>View</h3>\n<p>The View is now injected with the Model at application start-up. User\ninteraction captured by the View triggers the View to update the Model. With the\nModel event system in place, any Model change will trigger listeners to run.</p>\n<h3>Controller</h3>\n<p>In this version, the Controller is simple and limited to application setup, data\npersistence and messaging the view. Below is the entire Controller class.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// app.ts (aka the Controller)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _todos<span class=\"token operator\">:</span> Todos<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _view<span class=\"token operator\">:</span> View<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> _store<span class=\"token operator\">:</span> Store\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// setup:</span>\n    <span class=\"token comment\">// 1. load data into the Model</span>\n    <span class=\"token comment\">// 2. register a function to run when the Model changes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todos<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>TodoEvents<span class=\"token punctuation\">.</span><span class=\"token constant\">CHANGE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onChange</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todos<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>todo <span class=\"token keyword\">as</span> Todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_view<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token function\">_save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_store<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_todos<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// called when the Model changes:</span>\n  <span class=\"token comment\">// 1. save the Model</span>\n  <span class=\"token comment\">// 2. update the View</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">_onChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Final Thoughts</h2>\n<p>The high-level concept of MVC is easy to grasp and can indeed be trivially\nimplemented. Although the Todo MVC app is now a cliché, this project was a great\nexercise in exploring the nuances of the MVC pattern, in making design decisions\nin the face of uncertainty and dealing with TypeScript and the DOM.</p>","fields":{"slug":"/mvc/"},"frontmatter":{"title":"My Todo MVC","description":"My notes on building an app following the MVC pattern.","date":"February 02, 2021"}},"site":{"siteMetadata":{"title":"David Valles","siteUrl":"https://dtjv.io"}}},"pageContext":{"id":"c802ecf4-cb8b-59ea-8e29-243578797b8e"}},"staticQueryHashes":["3764592887"]}