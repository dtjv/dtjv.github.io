{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/lessons-from-building-memowise/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lessons from Building Memowise\",\n  \"date\": \"2021-03-04T00:00:00.000Z\",\n  \"description\": \"A few notes on how I might improve my project development.\",\n  \"draft\": false,\n  \"template\": \"post\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Yesterday, I released the latest version of\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://memowise.vercel.app\"\n  }, \"Memowise\"), \" - now a complete CRUD application with\\nGitHub authentication. Over the last two weeks its size and complexity grew\\nlarge enough for me to experience pain points in my development process. This\\narticle covers what I did right and what I can improve on the next project.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"View the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://memowise.vercel.app\"\n  }, \"app\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"View the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dtjv/memowise\"\n  }, \"source code\"), \".\")), mdx(\"h2\", null, \"MVP\"), mdx(\"p\", null, \"I started this project mid-November of 2020 with a goal to buid and deploy a\\nsimple flashcard app using Next.js, Tailwind CSS and MongoDB Atlas. By January,\\n2021, I hit my goal.\"), mdx(\"p\", null, \"The MVP release of Memowise allowed visitors to browse flashcard sets by topic\\nand subtopic, flip through flashcards within a set and assess their knowledge\\nvia a quiz feature.\"), mdx(\"p\", null, \"From a technical perspective, the Memowise MVP read data from a database and\\nrendered it to the browser. While limited in functionality, I was happy I\\nestablished the application foundation.\"), mdx(\"h2\", null, \"Version 2\"), mdx(\"p\", null, \"In February, I realized I needed a completed\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\"\n  }, \"CRUD\"), \"\\napplication in my portfolio. Since Memowise was sorely lacking in features, I\\ndecided to enhance the app. Over the next month I added authentication, a user\\ndashboard, the ability to create, edit and delete a flashcard set and the\\nability to link and unlink a public set to a user's account.\"), mdx(\"p\", null, \"The process to develop those features was a twisty road of learning, source-code\\nreading, frustration, scope-creep, self-imposed bugs, integration limitations,\\nrefactors, and small successes. Memowise is not the most complex app, but when\\nyou're building and learning, even small features are non-trivial until the\\nexperience deepens. The experience I gained shed a light on missteps along the\\nway - and lessons to learn.\"), mdx(\"h2\", null, \"Design\"), mdx(\"p\", null, \"At a high level, application design includes UI/UX, data models, code structure,\\ncomponent composition, abstraction, and error handling - among other areas.\\nAddressing design in these areas promotes discovery and avoidance of pain points\\npossibly experienced later in the development cycle.\"), mdx(\"p\", null, \"It's unrealistic to believe upfront design will solve all potential problems or\\nnever change as development progresses. Case in point, I didn't realize I needed\\na custom React hook to grab the user database profile until most of my page\\nroutes had the same chunk of code. But, I should have designed my database a bit\\nbetter to reduce the complexity of an unnecessarily deep data structure.\"), mdx(\"h2\", null, \"Type Safety\"), mdx(\"p\", null, \"Out of the box, Next.js and JavaScript do not provided any reasonable assurance\\nthe code you write at the time you write it doesn't have a basic error. So you\\nare free to reference a component that's not imported, or misspell a variable,\\nor access a deeply nested data structure without \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"undefined\"), \" checks. This\\ndevelopment experience annoys me and wastes too much time.\"), mdx(\"p\", null, \"Next time I'll use TypeScript. Actually, I'd like to try\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://elm-lang.org/\"\n  }, \"Elm\"), \".\\uD83E\\uDDD0\"), mdx(\"h2\", null, \"Scope Creep\"), mdx(\"p\", null, \"The original scope of my MVP was more complex. Over time, I trimmed the project\\nscope due to feature development taking too long. During version 2 development,\\nI let the project requirements expand on a daily basis - which added unnecessary\\nstress and the feeling I wasn't getting anything done.\"), mdx(\"p\", null, \"Scoping a project well comes from experience. For now, I'll work towards\\ndevelopment to a specification to maintain a sense of progress and completion of\\nthe project milestones.\"), mdx(\"h2\", null, \"Continous Integration and Testing\"), mdx(\"p\", null, \"Memowise does not have any tests or automated continuous integration to ensure\\nthe app doesn't break when I add new features. This bit me when I realized my\\ncode was not deploying due to build failures. The problem stemmed from me\\npushing code commits from a local development to production without testing a\\nproduction build.\"), mdx(\"p\", null, \"I've used \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.travis-ci.com/\"\n  }, \"Travis CI\"), \" in the past. I think it's time\\nto dive into \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/features/actions\"\n  }, \"GitHub Actions\"), \".\"), mdx(\"h2\", null, \"Wrap Up\"), mdx(\"p\", null, \"I'm glad I finished Memowise. I still have a list of feature TODOs that I could\\nadd - but I'm anxious to move on to another project. And now I have lessons\\nlearned I can put into practice as I work to improve my skill as a developer.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/lessons-from-building-memowise/"},"frontmatter":{"title":"Lessons from Building Memowise","description":"A few notes on how I might improve my project development.","date":"March 04, 2021"}},"site":{"siteMetadata":{"title":"David Valles","siteUrl":"https://dtjv.io"}}},"pageContext":{"id":"105d7547-8b07-5c37-b560-ce4ee67bf771"}},
    "staticQueryHashes": ["3764592887"]}