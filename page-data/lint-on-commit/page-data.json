{"componentChunkName":"component---src-templates-post-js","path":"/lint-on-commit/","result":{"data":{"markdownRemark":{"html":"<p>On a recent project, I decided to give\n<a href=\"https://github.com/okonet/lint-staged\">lint-staged</a> a try. For those who don't\nknow, it's a tool that runs linters against staged git files, thus preventing\npoor code from slipping into the project code base.</p>\n<p>I installed <code class=\"language-text\">lint-staged</code> and setup my <code class=\"language-text\">package.json</code> as follows.\n<a href=\"https://github.com/typicode/husky/tree/main\">Husky</a> is a tool that runs\nconfigured git hooks.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type-check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --pretty --noEmit\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.@(ts|tsx)\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn type-check\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When I tried to commit a change, the type check command failed, reporting errors\nin packages within the <code class=\"language-text\">node_modules</code> folder. That's odd, since <code class=\"language-text\">tsconfig.json</code>\nignores <code class=\"language-text\">node_modules</code>.</p>\n<p>The issue resides in how <code class=\"language-text\">lint-staged</code> calls <code class=\"language-text\">tsc</code>. It passes git staged files\nto <code class=\"language-text\">tsc</code> via the command line, which means <code class=\"language-text\">tsc</code> ignores <code class=\"language-text\">tsconfig.json</code>.\n(<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#using-tsconfigjson-or-jsconfigjson\">see reference</a>).</p>\n<p>My first fix moved the type check task to a different git hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-push\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn type-check\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although, this prevented <code class=\"language-text\">lint-staged</code> from running the command, it had two\nconsequences.</p>\n<ol>\n<li>Each call to <code class=\"language-text\">git push</code> will type check the <em>whole</em> project</li>\n<li>I can commit code with type check errors</li>\n</ol>\n<p>I can live with #1, but #2 kind of defeats the whole purpose of the automatic\ntype checking.</p>\n<p>An alternative approach uses a <code class=\"language-text\">lint-staged.config.js</code> file, and follow this\n<a href=\"https://github.com/okonet/lint-staged#example-run-tsc-on-changes-to-typescript-files-but-do-not-pass-any-filename-arguments\">example</a>.</p>\n<p>I removed the <code class=\"language-text\">lint-staged</code> block from <code class=\"language-text\">package.json</code> and created a\n<code class=\"language-text\">lint-staged-config.js</code> file as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'**/*.ts?(x)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'yarn type-check'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this setup, <code class=\"language-text\">lint-staged</code> runs <code class=\"language-text\">type-check</code> without command-line arguments.\n<code class=\"language-text\">tsc</code> will run using <code class=\"language-text\">tsconfig.json</code> and process the whole project. This setup\nis okay, but I had other <code class=\"language-text\">lint-staged</code> tasks to run as well and I didn't want to\nmove more tasks into the config file and add complexity.</p>\n<h3>Husky v5</h3>\n<p>While my setup above was technically complete, I saw\n<a href=\"https://github.com/typicode\">typicode</a> released husky v5 and decided to try it.</p>\n<p>I installed husky v5, removed <code class=\"language-text\">lint-staged.config.js</code> and setup my\n<code class=\"language-text\">package.json</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier -w .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type-check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --pretty --noEmit\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"postinstall\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"is-ci || husky install\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.@(js|ts|tsx)\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn lint\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yarn format\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see I've included the other scripts I needed to run pre-commit. Next, I\nran the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># this creates `.husky/pre-commit` shell script</span>\n$ npx husky <span class=\"token function\">add</span> .husky/pre-commit <span class=\"token string\">\"yarn lint-staged\"</span></code></pre></div>\n<p>Lastly, I modified <code class=\"language-text\">.husky/pre-commit</code> to run the type check script. Here's the\npre-commit script:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/bin/sh\n\n[ -n &quot;$CI&quot; ] &amp;&amp; exit 0\n\n. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;\n\nyarn type-check\nyarn lint-staged</code></pre></div>\n<h2>Wrap-up</h2>\n<p>With this setup, I can run all my scripts manually from the command-line -\nsomething I couldn't do in previous setups. Linting and formatting scripts run\non staged files - keeping their execution times low. Lastly, type checking is\npart of the pre-commit hook - preventing errors from sneaking into the code\nbase.</p>\n<p>Now I'm happy with this setup. It's simple, clear and concise. You can see this\nsetup in action <a href=\"https://github.com/dtjv/next-poc\">here</a>.</p>","fields":{"slug":"/lint-on-commit/"},"frontmatter":{"title":"Lint on Commit","description":null,"date":"February 09, 2021"}},"site":{"siteMetadata":{"title":"David Valles","siteUrl":"https://dtjv.io"}}},"pageContext":{"id":"90c2c619-f053-5252-9540-b9443a9fbb98"}},"staticQueryHashes":["3764592887"]}