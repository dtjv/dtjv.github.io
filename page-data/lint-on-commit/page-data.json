{"componentChunkName":"component---src-templates-post-js","path":"/lint-on-commit/","result":{"data":{"markdownRemark":{"html":"<p>On a recent project, I decided to give\n<a href=\"https://github.com/okonet/lint-staged\"><code class=\"language-text\">lint-staged</code></a> a try. For those who\ndon't know, it's a tool that runs linters against staged git files, thus\npreventing poor code from slipping into the project code base. As I followed two\nimplementations, <a href=\"https://github.com/paulintrognon/next-typescript\">here</a> and\n<a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-typescript-eslint-jest\">here</a>,\nI made my changes and stumbled down yet another hole of tooling pain.</p>\n<!-- more -->\n<p>To begin, I installed <code class=\"language-text\">lint-staged</code> and setup my <code class=\"language-text\">package.json</code> .</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier -w .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext ts --ext tsx\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type-check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --pretty --noEmit\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.@(ts|tsx)\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn format\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yarn lint\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yarn type-check\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You'll notice I use <a href=\"https://github.com/typicode/husky\"><code class=\"language-text\">husky</code></a> - a tool that\nruns configured git hooks.</p>\n<p>When I tried to commit a change, the <code class=\"language-text\">type-check</code> script failed, reporting\nerrors in packages within the <code class=\"language-text\">node_modules</code> folder. That's odd, since\n<code class=\"language-text\">tsconfig.json</code> ignores <code class=\"language-text\">node_modules</code>.</p>\n<p>The issue resides in how <code class=\"language-text\">lint-staged</code> calls <code class=\"language-text\">tsc</code>. It passes git staged files\nto <code class=\"language-text\">tsc</code> via the command line, which means <code class=\"language-text\">tsc</code> ignores <code class=\"language-text\">tsconfig.json</code>.\n(<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#using-tsconfigjson-or-jsconfigjson\">reference</a>).</p>\n<h3>Fix #1</h3>\n<p>My first fix moved the call to <code class=\"language-text\">type-check</code> to a different git hook and removed\nit from the <code class=\"language-text\">lint-staged</code> call list.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"pre-push\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn type-check\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.@(ts|tsx)\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn format\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yarn lint\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This setup works, but I saw two consequences to this change.</p>\n<ol>\n<li><code class=\"language-text\">type-check</code> checks the <strong>entire</strong> project on each <code class=\"language-text\">git push</code>.</li>\n<li><code class=\"language-text\">type-check</code> runs <strong>after</strong> a commit, potentially allowing errors into the\ncode base.</li>\n</ol>\n<p>I can live with #1, but #2 defeats the whole purpose of the automatic type\nchecking to ensure no errors get committed..</p>\n<h2>Fix #2</h2>\n<p>An alternative approach follow this\n<a href=\"https://github.com/okonet/lint-staged#example-run-tsc-on-changes-to-typescript-files-but-do-not-pass-any-filename-arguments\">example</a>.\nI removed the <code class=\"language-text\">lint-staged</code> block from <code class=\"language-text\">package.json</code> and created a\n<code class=\"language-text\">lint-staged-config.js</code> file as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'**/*.ts?(x)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'yarn type-check'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token string\">'**/*.(ts|js)?(x)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filenames</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yarn lint </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filenames<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token string\">'**/*.js?(x)'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filenames</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    filenames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">prettier --write '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this setup, <code class=\"language-text\">lint-staged</code> runs <code class=\"language-text\">type-check</code> without command-line arguments\nand <code class=\"language-text\">tsc</code> will run using <code class=\"language-text\">tsconfig.json</code>. This solution is cool, but perhaps\nunnecessarily complex.</p>\n<h3>Husky v5</h3>\n<p>While my setup above was technically complete, I saw\n<a href=\"https://github.com/typicode\">typicode</a> released husky v5 and decided to try it.\nI installed husky v5, removed <code class=\"language-text\">lint-staged.config.js</code> and setup my\n<code class=\"language-text\">package.json</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier -w .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type-check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --pretty --noEmit\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"postinstall\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"is-ci || husky install\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.@(js|ts|tsx)\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yarn lint\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yarn format\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, I ran the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx husky <span class=\"token function\">add</span> .husky/pre-commit <span class=\"token string\">\"yarn lint-staged\"</span></code></pre></div>\n<p>Lastly, I modified <code class=\"language-text\">.husky/pre-commit</code> - created in the last step - to run the\n<code class=\"language-text\">type-check</code> script. Here's my final <code class=\"language-text\">pre-commit</code> script.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token punctuation\">[</span> -n <span class=\"token string\">\"<span class=\"token variable\">$CI</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span>\n\n<span class=\"token function\">yarn</span> type-check\n<span class=\"token function\">yarn</span> lint-staged</code></pre></div>\n<h2>Wrap-up</h2>\n<p>With this setup, I can run all my scripts manually from the command-line. The\nlinting and formatting scripts run on staged files - keeping their execution\ntimes low. Lastly, type checking is part of the pre-commit hook - preventing\nerrors from sneaking into the code base.</p>\n<p>I'm happy with this setup. It's simple, clear and concise. You can see this\nsetup in action <a href=\"https://github.com/dtjv/next-poc\">here</a>.</p>","fields":{"slug":"/lint-on-commit/"},"frontmatter":{"title":"Lint on Commit","description":null,"date":"February 09, 2021"}},"site":{"siteMetadata":{"title":"David Valles","siteUrl":"https://dtjv.io"}}},"pageContext":{"id":"90c2c619-f053-5252-9540-b9443a9fbb98"}},"staticQueryHashes":["3764592887"]}